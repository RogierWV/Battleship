type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Cruiser.java
  visible: true
  text: |
    package battleship;

    public class Cruiser extends Ship {
        public static final String message = "Enter the coordinates of the Cruiser (3 cells):";
        public Cruiser(Coordinate start, Coordinate end) {
            super(3, start, end);
        }
    }
  learner_created: true
- name: src/battleship/Coordinate.java
  visible: true
  text: |
    package battleship;

    import java.util.Arrays;

    public class Coordinate implements Comparable {
    //public class Coordinate {
        private int x;
        private int y;
        public Coordinate(String coord) {
            if(!coord.matches("[A-J][0-9]+"))
                throw new IllegalArgumentException("Invalid coordinate " + coord + "!");
            this.x = Integer.parseInt(coord.substring(1).trim()) - 1;
            this.y = Character.codePointAt(coord, 0) - 65;
            if(x >= 10 || y >= 10) throw new IllegalArgumentException("Invalid coordinate " + coord + "!");
        }

        public Coordinate(int x, int y) {
            this.x = x;
            this.y = y;
            if(x >= 10 || y >= 10) throw new IllegalArgumentException("Invalid coordinate " + x  + ", " + y + "!");
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public static Coordinate[] range(Coordinate start, Coordinate end) {
            int size = Math.max(Math.abs(start.getX() - end.getX()),
                    Math.abs(start.getY() - end.getY())) + 1;
            Coordinate[] ret = new Coordinate[size];
            int count = 0;
            if(start.getX() == end.getX())
                for(int y = start.getY(); y <= end.getY(); y++)
                    ret[count++] = new Coordinate(start.getX(), y);
            else if (start.getY() == end.getY())
                for(int x = start.getX(); x <= end.getX(); x++)
                    ret[count++] = new Coordinate(x, start.getY());
            else throw new IllegalArgumentException("No straight line possible from " +
                        start + " to " + end + "!");
            Main.DEBUG_LOG.println(Arrays.toString(ret));
            return ret;
        }

        public static boolean overlap(Coordinate startA, Coordinate endA,
                                      Coordinate startB, Coordinate endB) {
            for(Coordinate a : Coordinate.range(startA, endA)) {
                Main.DEBUG_LOG.printf("a: %s%n", a);
                if (a == null) continue;
                for (Coordinate b : Coordinate.range(startB, endB)) {
                    Main.DEBUG_LOG.printf("b: %s%n", b);
                    if (b == null) continue;
                    if (a.closeTo(b)) {
                        Main.DEBUG_LOG.printf("Too close: %s and %s%n", a, b);
                        return true;
                    }
                }
            }
            return false;
        }

        public boolean closeTo(Coordinate other) {
            if(other == null) return false;
            return (Math.abs(this.x - other.getX()) <= 1 &&
                    Math.abs(this.y - other.getY()) <= 1);
        }

        @Override
        public String toString() {
            return String.format("%s%d", ((char)(y+65)), x+1);
        }

        @Override
        public int compareTo(Object o) {
            if(o == null) return 1;
            if(((Coordinate)o).getX() == x)
                return y - ((Coordinate)o).getY();
            if(((Coordinate)o).getY() == y)
                return x - ((Coordinate)o).getX();
            return 0;
        }

        @Override
        public boolean equals(Object o) {
            return ((Coordinate)o).getX() == x && ((Coordinate)o).getY() == y;
        }
    }
  learner_created: true
- name: src/battleship/Submarine.java
  visible: true
  text: |
    package battleship;

    public class Submarine extends Ship {
        public static final String message = "Enter the coordinates of the Submarine (3 cells):";
        public Submarine(Coordinate start, Coordinate end) {
            super(3, start, end);
        }
    }
  learner_created: true
- name: src/battleship/Carrier.java
  visible: true
  text: |
    package battleship;

    public class Carrier extends Ship {
        public static final String message = "Enter the coordinates of the Aircraft Carrier (5 cells):";
        public Carrier(Coordinate start, Coordinate end) {
            super(5, start, end);
        }
    }
  learner_created: true
- name: src/battleship/Field.java
  visible: true
  text: |
    package battleship;

    import java.util.ArrayList;
    import java.util.List;

    public class Field {
        private Ship[] ships;
        private int currentShips;
        private List<Coordinate> misses;
        public Field() {
            ships = new Ship[5];
            currentShips = 0;
            misses = new ArrayList<>();
        }

        public void addShip(Ship ship) {
            for (Ship s: ships) {
                if(s == null) continue;
                if(Coordinate.overlap(s.start, s.end, ship.start, ship.end)){
                    throw new IllegalArgumentException("Overlapping coordinates!");
                }
            }
            this.ships[this.currentShips] = ship;
            this.currentShips++;
        }

        public boolean shoot(Coordinate target) {
            for (Ship s : ships) {
                Coordinate[] coords = s.coords();
                for(int i = 0; i < coords.length; i++) {
    //            for(Coordinate c : s.coords()) {
                    if(coords[i].equals(target)) {
                        //TODO: add hit to ship
                        s.hits[i] = true;
                        return true;
                    }
                }
            }
            misses.add(target);
            return false;
        }

        public boolean shipsLeft() {
            for (Ship s : ships)
                for(boolean hit : s.hits)
                    if(!hit) return true;
            return false;
        }

        public String toString() {
            return render(true);
        }

        public String render() {
            return render(false);
        }

        public String render(boolean shipsVisible) {
            //build 2D character array to work with
            char[][] fieldRender = new char[10][10];
            for(int i = 0; i < 10; i++)
                for (int j = 0; j < 10; j++) {
                    if (misses.contains(new Coordinate(j, i))) fieldRender[i][j] = 'M';
                    else fieldRender[i][j] = '~';
                }
            for (Ship ship: this.ships) {
                if(ship == null) continue;
                ship.render(fieldRender, !shipsVisible);
            }

            // turn the 2D char array into a well formatted string
            StringBuilder sb = new StringBuilder();
            sb.append("  1 2 3 4 5 6 7 8 9 10\n");
            for(int i = 0; i < 10; i++) {
                sb.append(String.format("%s ", (char)(i+65)));
                for (int j = 0; j < 10; j++)
                    sb.append(String.format("%s ", fieldRender[i][j]));
                sb.append("\n");
            }
            return sb.toString();
        }
    }
  learner_created: true
- name: src/battleship/Destroyer.java
  visible: true
  text: |
    package battleship;

    public class Destroyer extends Ship {
        public static final String message = "Enter the coordinates of the Destroyer (2 cells):";
        public Destroyer(Coordinate start, Coordinate end) {
            super(2, start, end);
        }
    }
  learner_created: true
- name: src/battleship/Battleship.java
  visible: true
  text: |
    package battleship;

    public class Battleship extends Ship {
        public static final String message = "Enter the coordinates of the Battleship (4 cells):";
        public Battleship(Coordinate start, Coordinate end) {
            super(4, start, end);
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 27 Mar 2023 08:22:13 UTC"
record: -1
